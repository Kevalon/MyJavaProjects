package com.ssu.diploma.swing;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.ssu.diploma.swing.utils.Utils;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import lombok.Getter;

public class ReceiverSettingsForm extends JFrame {
    private JPanel receiverSettingsPanel;
    private JTextArea errorLogConsole;
    private JTextField receiverPortTextField;
    private JTextField receivedFilesDirectoryTextField;
    private JButton choosePathButton1;
    private JButton applyButton;
    private JScrollPane errorLogConsoleScrollPane;

    @Getter
    private final Map<String, String> settings = new HashMap<>();

    public ReceiverSettingsForm() {

        settings.put("serverPort", "8081");
        if (Files.exists(Paths.get("C:\\Users\\vbifu\\OneDrive\\Документы\\receive"))) {
            settings.put("receivedFilesDirectory", "C:\\Users\\vbifu\\OneDrive\\Документы\\receive");
        } else {
            settings.put("receivedFilesDirectory", "");
        }

        choosePathButton1.addActionListener(e -> {
            Utils.browseDirAction(receivedFilesDirectoryTextField, this);
        });

        applyButton.addActionListener(e -> {
            settings.put("serverPort", receiverPortTextField.getText());

            if (!receivedFilesDirectoryTextField.getText().equals("")) {
                if (Files.isDirectory(Paths.get(receivedFilesDirectoryTextField.getText()))) {
                    settings.put("receivedFilesDirectory",
                            receivedFilesDirectoryTextField.getText());
                } else {
                    Utils.log(
                            errorLogConsole,
                            "Не получилось проверить указанную директорию для файлов."
                    );
                    return;
                }
            }
            Utils.log(
                    errorLogConsole,
                    "Все изменения были успешно применены."
            );
        });
    }

    public void init() {
        this.add(receiverSettingsPanel);
        this.setSize(600, 400);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);

        receiverPortTextField.setText(settings.get("serverPort"));
        receivedFilesDirectoryTextField.setText(settings.get("receivedFilesDirectory"));

        errorLogConsole.setText("");

        this.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        receiverSettingsPanel = new JPanel();
        receiverSettingsPanel.setLayout(
                new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Порт ");
        receiverSettingsPanel.add(label1,
                new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                        GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        receiverPortTextField = new JTextField();
        receiverPortTextField.setHorizontalAlignment(10);
        receiverPortTextField.setText("");
        receiverSettingsPanel.add(receiverPortTextField,
                new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,
                        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0,
                        false));
        final JLabel label2 = new JLabel();
        label2.setText("Директория для получаемых файлов");
        receiverSettingsPanel.add(label2,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                        GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        receivedFilesDirectoryTextField = new JTextField();
        receiverSettingsPanel.add(receivedFilesDirectoryTextField,
                new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0,
                        false));
        choosePathButton1 = new JButton();
        choosePathButton1.setText("Выбрать");
        receiverSettingsPanel.add(choosePathButton1,
                new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        applyButton = new JButton();
        applyButton.setText("Применить изменения");
        receiverSettingsPanel.add(applyButton,
                new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorLogConsoleScrollPane = new JScrollPane();
        receiverSettingsPanel.add(errorLogConsoleScrollPane,
                new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK |
                        GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        errorLogConsole = new JTextArea();
        errorLogConsoleScrollPane.setViewportView(errorLogConsole);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return receiverSettingsPanel;
    }
}
