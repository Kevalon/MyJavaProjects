package com.ssu.diploma.swing;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.ssu.diploma.swing.utils.Utils;
import com.ssu.diploma.threads.Receiver;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class ReceiverForm extends JFrame {
    private JPanel receiverPanel;
    private JButton startButton;
    private JButton stopButton;
    private JTextArea logConsole;
    private JButton settingsButton;
    private JScrollPane logConsoleScrollPane;

    private final ReceiverSettingsForm receiverSettingsForm = new ReceiverSettingsForm();
    private Receiver receiverThread;

    public ReceiverForm() {
        this.add(receiverPanel);

        startButton.addActionListener(e -> {
            String test = receiverSettingsForm.getSettings().get("receivedFilesDirectory");
            if (test == null || test.equals("")) {
                Utils.log(
                        logConsole,
                        "Пожалуйста, выберите директорию для принимаемых файлов в настройках.");
                return;
            }
            receiverThread = new Receiver(receiverSettingsForm.getSettings(), logConsole);
            receiverThread.start();
        });

        settingsButton.addActionListener(e -> {
            receiverSettingsForm.init();
        });

        stopButton.addActionListener(e -> {
            if (receiverThread == null) {
                Utils.log(logConsole, "Получатель не запущен.");
                return;
            }
            receiverThread.setStop(true);
        });

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(800, 500);
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);
        this.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        receiverPanel = new JPanel();
        receiverPanel.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        startButton = new JButton();
        startButton.setText("Старт");
        receiverPanel.add(startButton,
                new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Стоп");
        receiverPanel.add(stopButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        receiverPanel.add(spacer1, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null,
                null, null, 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Настройки");
        receiverPanel.add(settingsButton,
                new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logConsoleScrollPane = new JScrollPane();
        receiverPanel.add(logConsoleScrollPane,
                new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK |
                        GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logConsole = new JTextArea();
        logConsoleScrollPane.setViewportView(logConsole);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return receiverPanel;
    }
}
