package com.ssu.diploma.swing;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.ssu.diploma.swing.utils.Utils;
import com.ssu.diploma.threads.Sender;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.stream.IntStream;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class SenderForm extends JFrame {
    private JPanel senderPanel;
    private JTextArea logConsole;
    private JButton startButton;
    private JButton stopButton;
    private JButton openFileButton;
    private JButton settingsButton;
    private JRadioButton linkEncryptionRadio;
    private JRadioButton endToEndRadio;
    private JComboBox modeComboBox;
    private JScrollPane logConsoleScrollPane;

    private final String[] modes =
            {"Нагрузочное тестирование", "Бесконечная отправка"};
    private final SenderSettingsForm senderSettingsForm = new SenderSettingsForm();
    private Sender senderThread;

    public SenderForm() {
        this.add(senderPanel);

        modeComboBox.setModel(new DefaultComboBoxModel(modes));

        endToEndRadio.setSelected(true);

        linkEncryptionRadio.addActionListener(e -> {
            if (endToEndRadio.isSelected()) {
                ButtonGroup rb = new ButtonGroup();
                rb.add(endToEndRadio);
                rb.clearSelection();
            }
        });

        endToEndRadio.addActionListener(e -> {
            if (linkEncryptionRadio.isSelected()) {
                ButtonGroup rb = new ButtonGroup();
                rb.add(linkEncryptionRadio);
                rb.clearSelection();
            }
        });

        startButton.addActionListener(e -> {
            String test = senderSettingsForm.getSettings().get("testFilesDirectory");
            if (test == null || test.equals("")) {
                Utils.log(
                        logConsole,
                        "Пожалуйста, укажите в настройках директорию с отправляемыми файлами."
                );
                return;
            }
            senderThread = new Sender(
                    senderSettingsForm.getSettings(),
                    logConsole,
                    IntStream.range(0, modes.length)
                            .filter(i -> modes[i].equals(modeComboBox.getSelectedItem()))
                            .findFirst()
                            .getAsInt(),
                    endToEndRadio.isSelected()
            );
            senderThread.start();
        });

        stopButton.addActionListener(e -> {
            if (senderThread == null) {
                Utils.log(logConsole, "Отправитель не запущен.");
                return;
            }
            senderThread.setStop(true);
        });

        settingsButton.addActionListener(e -> {
            senderSettingsForm.init();
        });

        openFileButton.addActionListener(e -> {
            File file = new File(System.getProperty("user.dir"));
            try {
                Desktop.getDesktop().open(file);
            } catch (IOException exception) {
                exception.printStackTrace();
                JOptionPane.showMessageDialog(null, "Файл не найден.");
            }
        });

        this.setSize(800, 500);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;

        this.setLocation(x, y);
        this.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        senderPanel = new JPanel();
        senderPanel.setLayout(new GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
        startButton = new JButton();
        startButton.setText("Старт");
        senderPanel.add(startButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setText("Стоп");
        senderPanel.add(stopButton, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openFileButton = new JButton();
        openFileButton.setText("Открыть файл");
        senderPanel.add(openFileButton,
                new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        settingsButton = new JButton();
        settingsButton.setText("Настройки");
        senderPanel.add(settingsButton,
                new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modeComboBox = new JComboBox();
        senderPanel.add(modeComboBox, new GridConstraints(0, 3, 1, 2, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endToEndRadio = new JRadioButton();
        endToEndRadio.setText("Сквозное шифрование");
        senderPanel.add(endToEndRadio, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        linkEncryptionRadio = new JRadioButton();
        linkEncryptionRadio.setText("Туннелирование");
        senderPanel.add(linkEncryptionRadio,
                new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                        GridConstraints.FILL_NONE,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(4);
        label1.setText("Тип тестирования");
        senderPanel.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logConsoleScrollPane = new JScrollPane();
        senderPanel.add(logConsoleScrollPane,
                new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER,
                        GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK |
                        GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logConsole = new JTextArea();
        logConsoleScrollPane.setViewportView(logConsole);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return senderPanel;
    }

}
